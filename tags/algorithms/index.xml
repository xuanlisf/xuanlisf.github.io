<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Hi, I&#39;m Xuan</title>
    <link>https://xuanli.me/tags/algorithms/</link>
    <description>Recent content in Algorithms on Hi, I&#39;m Xuan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Xuan Li</copyright>
    <lastBuildDate>Sat, 18 Feb 2017 19:19:01 +0000</lastBuildDate><atom:link href="https://xuanli.me/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java散列知识点总结</title>
      <link>https://xuanli.me/posts/2017-02-18-hash/</link>
      <pubDate>Sat, 18 Feb 2017 19:19:01 +0000</pubDate>
      
      <guid>https://xuanli.me/posts/2017-02-18-hash/</guid>
      <description>java 的根类 Object 具有 hashcode 方法。当 equal 方法被重写时也应当重写 hashcode 方法。
基本数据类型的散列码  byte short int char 类型的搜索键将会转换为 int。 float 类型的搜索键使用 Float.floatToIntBits(key) 作为散列码。 long 类型的搜索键会进行折叠操作，如下：  iny hashCode = (int) (key ^ (key &amp;gt;&amp;gt; 32));  double 类型的搜索键会使用 Double.doubleToLongBits(key) 方法转换为 long 类型然后再进行折叠。  字符串类型的散列码 对于字符串一般使用多项式散列码进行计算，
这里放个公式的图
b的较好取值为31，33，37，39，41。在 java String 类中 b 取31。
public static int hash(String key, int tableSize) { int hashVal = 0; for (int i = 0; i &amp;lt; key.</description>
    </item>
    
  </channel>
</rss>
